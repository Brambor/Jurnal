# Generated by Django 3.2.12 on 2022-06-02 17:25
# Then adjusted according to
# https://stackoverflow.com/questions/29787853/django-migrations-add-field-with-default-as-function-of-model

from django.db import migrations, models
import django.db.models.deletion


def set_my_defaults(apps, schema_editor):
    ReadAt = apps.get_model('entries', 'ReadAt')
    Person = apps.get_model('entries', 'Person')
    # there are no defaults needed to be set!
    if ReadAt.objects.count() == 0:
        return

    while True:
        ans = input("\nThere are ReadAt's, but no persons. Please select fix:\n"
            "1) Create a new person and set it as default to all ReadAt's.\n"
            "2) Select an existing person and set it as default to all ReadAt's.\n"
            f"\tNumber of existing persons: {Person.objects.count()}\n"
            "3) Abort, you will have to fix it yourself, somehow, or retry.\n"
            ">>> ")
        if ans == "1":
            person = make_new_person(apps)
            break
        if ans == "2":
            if Person.objects.count() == 0:
                print("Invalid option, there are no persons!")
                continue
            print("This code should be unreachable... How did you get there?")
            person = select_existing_person(apps)
            break
        elif ans == "3":
            raise Exception()
        else:
            print(f"Invalid option {repr(ans)}, must be '1' or '2'.")

    # use person
    for read_at in ReadAt.objects.all().iterator():
        read_at.read_by = person
        read_at.save()

def select_existing_person(apps):
    Person = apps.get_model('entries', 'Person')
    print("Select person, ctrl+c to abort:")
    list_of_persons = list(Person.objects.all())
    for i, person in enumerate(list_of_persons):
        print(f"{i}) person")
    while True:
        i = input(">>> ")
        if i.is_digit() and 0 <= int(i) < len(list_of_persons):
            break
        print(f"Invalid option {repr(ans)}")

    person = Person.objects.get(pk=i)
    return person

def make_new_person(apps):
    # create person
    Person = apps.get_model('entries', 'Person')
    display_name = input("Select person's display_name, ctrl+c to abort:\n>>> ")
    new_person = Person(display_name=display_name)
    new_person.save()
    return new_person


class Migration(migrations.Migration):

    dependencies = [
        ('entries', '0010_readat'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.AddField(
            model_name='readat',
            name='read_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='entries.person'),
            preserve_default=False,
        ),
        migrations.RunPython(set_my_defaults),
        migrations.AlterField(
            model_name='readat',
            name='read_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entries.person'),
        ),
    ]
